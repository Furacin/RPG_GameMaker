<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Prota_Abajo_SPR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>Mascara_Prota_SPR</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializacion
image_speed = 0;

// Enumerador en el que a cada valor le asignamos un script
enum estados_jugador {
    parado = Prota_Parado,
    caminando = Prota_Caminando,
    atacando = Prota_Atacando
}

dir = "abajo" // Variable de direccion que tiene por defecto "abajo"
estado = estados_jugador.parado // estado por defecto del prota
salida = -1; // por defecto no aparecemos sobre una salida

global.debug = false; // Variable global debug inicializada a false

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializar el movimiento
vv = 0; // velocidad vertical
vh = 0; // velocidad horizontal
v = 2; // 2 pixeles por fotograma
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capturar movimiento por teclado
vh = (-keyboard_check(vk_left) + keyboard_check(vk_right)) * v; // Uno de los dos sumandos devuelve true si se esta apretando la tecla de direccion izquierda o la derecha. De suman para evitar errores a la hora de apretar las dos teclas a la vez.
vv =  (-keyboard_check(vk_up) + keyboard_check(vk_down)) * v;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestion de estado de movimiento

// Determinamos direccion
if (vv &gt; 0) dir = "abajo"; // nos estamos moviendo hacia abajo
else 
if (vv &lt; 0) dir ="arriba"; // nos estamos moviendo hacia arriba
else
if (vh &gt; 0) dir = "derecha"; // nos estamos moviendo hacia la derecha
else
if (vh &lt;0) dir = "izquierda"; // nos estamos moviendo hacia la izquierda
            
// Si no estamos atacando comprobamos estados parado y caminar
if (estado != estados_jugador.atacando) {
    // Si tenemos una direccion establecemos el estado caminar
    if (dir != "") estado = estados_jugador.caminando;
        // Pero si no nos movemos establecemos el estado parado
        if (vh == 0 and vv == 0) estado = estados_jugador.parado;
}
// Si estamos atacando paramos el movimiento
else {
    vh = 0;
    vv = 0;
}
            


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestion de estados de ataque

if (keyboard_check_pressed(ord('X'))and estado != estados_jugador.atacando) { // Si presionamos la tecla 'X' y ademas comprobamos que no estamos atacando ya que sino la animacion de atacar se cortaria. 
    // Atacar si no estamos atacando y reiniciamos animacion
    estado = estados_jugador.atacando;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gestion de colisiones contra paredes y objetos

if (instance_place(x+vh,y,Pared_OBJ)) { vh = 0; } // Le sumamos la velocidad horizontal a la posicion actual para comprobar que hay una pared, y si la encuentra que se pare el prota
if (instance_place(x,y+vv,Pared_OBJ)) { vv = 0; } // Lo mismo, pero con la velocidad vertical

// Colision horizontal de objeto interactivo solo si está habilitada
interactivo = instance_place(x+vh,y,Interactivo_OBJ); // Intentar encontrar un objeto interactivo
if (interactivo) { // Si encontramos un objeto interactivo
    if (interactivo.colision) { // Si tiene activada la colision
        vh = 0;  // Cancelamos la velocidad horizontal
    }
}

// Colision vertical de objeto interactivo solo si esta habilitada
interactivo = instance_place(x,y+vv,Interactivo_OBJ);
if (interactivo) {
    if (interactivo.colision) {
        vv = 0; // Cancelamos la velocidad vertical
    }
}

// Gestion de colisiones contra entradas y cambio de room
entrada = instance_place(x,y,Entrada_OBJ); // Comprobamos si en la posicion actual en la que nos estamos moviendo tenemos un objeto de tipo entrada
with (entrada) { // Nos metemos dentro de ese objeto
    if (room_exists(mapa)) {   // Comprobar room destino
        other.salida = salida; // Guardamos la salida destino del mapa al que vamos a ir a parar. "other.salida" se está refiriendo a una variable salida pero del personaje. Y "salida" es la que está definida en el Creation Code del objeto Salida alojado en la room(casa) a la que queremos ir.
        room_goto(mapa); // Nos transportamos al mapa
     }
    else show_message("No existe la room: " + entrada.mapa);
}
         

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Establecer movimiento final y estado
x += vh; // Sumar a la x la velocidad
y += vv; // Sumar a la y la velocidad

// Ejecutamos uno de los scripts de movimiento dependiendo de la variable estado
script_execute(estado); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transportar al punto de salida si hay
if (salida != -1) { // Comprobamos si hemos establecido una salida
    // Iterar todas las salidas hasta encontrar destino
    with(Salida_OBJ) { // Si encontramos nuestra salida(aquí tendremos que poner tantos with como salidas tengamos)
        if (other.salida == nombre) { // "other.salida" es el nombre de la salida con la que acabamos de chocar y comprobamos que es igual a la variables nombre de la room de la salida
            // Mover al jugador y reiniciar su próxima salida
            other.x = x; // Coordenada X del jugador en la coordenada X de la salida
            other.y = y; // Coordenada Y del jugador en la coordenada Y de la salida
            other.salida = -1; // Reiniciamos la salida
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// &lt;- Dibujar el debug

if (global.debug) {
    draw_set_font(f_Debug); // Establecemos la fuente
    draw_set_halign(fa_left); // Alineacion arriba y a la izquierda
    draw_set_color(c_white); // Color blanco
    draw_set_alpha(0.5); // Transparencaia
    draw_rectangle(0,0,270,75,false); // Dibujar un rectangulo donde va a ir el debug
    draw_set_color(c_black); // Color de las letras en el rectangulo
    draw_set_alpha(1); // Transparencia(maxima) de las letras
    draw_text(2,2,"FPS/FPS REAL: " + string(fps) + "/" + string(fps_real)); // A una distancia de 2 pixeles, mostramos los fps y los fps reales.
    draw_text(2,20,"ESTADO: " + script_get_name(estado)); // Segun la variable "estado" mostramos el script que se este ejecutando.
    draw_text(2,38,"SPRITE: " + sprite_get_name(sprite_index)); // Sprite asignado en este momento
    draw_text(2,56,"IMAGE INDEX: " + string(image_index)); 
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.debug = !global.debug; // Activar y desactivar el debug cuando pulsemos F1
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
